// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721Pausable.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";

contract OurSongNFToken is Context, Ownable, ERC721Burnable, ERC721Pausable {
  using SafeMath for uint256;

  uint256 private _totalSupply;

  constructor(string memory name_, string memory symbol_, uint256 initialSupply_, string memory baseURI_, address owner_) public ERC721(name_, symbol_) {
    setBaseURI(baseURI_);
    addTotalSupply(initialSupply_);

    transferOwnership(owner_);
  }

  /**
    * @dev See {IERC721Enumerable-totalSupply}.
    */
  function totalSupply() public view virtual override returns (uint256) {
    return _totalSupply;
  }

  function addTotalSupply(uint256 amount_) public virtual onlyOwner {
    _totalSupply = _totalSupply.add(amount_);
  }

  function setBaseURI(string memory baseURI_) public virtual onlyOwner {
    _setBaseURI(baseURI_);
  }

  /**
    * @dev Creates a new token for `to`. Its token ID will be automatically
    * assigned (and available on the emitted {IERC721-Transfer} event), and the token
    * URI autogenerated based on the base URI passed at construction.
    *
    * See {ERC721-_mint}.
    *
    * Requirements:
    *
    * - the caller must have the `MINTER_ROLE`.
    */
  function mint(address to_, uint256 tokenId_) public virtual onlyOwner {
    // We cannot just use balanceOf to create the new tokenId because tokens
    // can be burned (destroyed), so we need a separate counter.
    require(tokenId_ > 0, "Mint: token id must not be zero");
    require(tokenId_ <= _totalSupply, "Mint: token id must not bigger than total supply");

    _mint(to_, tokenId_);
  }

  /**
    * @dev Pauses all token transfers.
    *
    * See {ERC721Pausable} and {Pausable-_pause}.
    *
    * Requirements:
    *
    * - the caller must have the `PAUSER_ROLE`.
    */
  function pause() public virtual onlyOwner {
    _pause();
  }

  /**
    * @dev Unpauses all token transfers.
    *
    * See {ERC721Pausable} and {Pausable-_unpause}.
    *
    * Requirements:
    *
    * - the caller must have the `PAUSER_ROLE`.
    */
  function unpause() public virtual onlyOwner {
    _unpause();
  }

  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {
    super._beforeTokenTransfer(from, to, tokenId);
  }
}