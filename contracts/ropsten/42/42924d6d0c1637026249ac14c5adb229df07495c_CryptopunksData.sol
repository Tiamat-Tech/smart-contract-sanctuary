/**
 *Submitted for verification at Etherscan.io on 2021-09-12
*/

pragma solidity 0.7.6;

contract CryptopunksData {

    string internal constant SVG_HEADER = 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.2" viewBox="0 0 24 24">';
    string internal constant SVG_FOOTER = '</svg>';

    bytes private palette;
    mapping(uint8 => bytes) private assets;
    mapping(uint8 => string) private assetNames;
    mapping(uint64 => uint32) private composites;
    mapping(uint8 => bytes) private punks;

    address payable internal deployer;
    bool private contractSealed = false;

    modifier onlyDeployer() {
        require(msg.sender == deployer, "Only deployer.");
        _;
    }

    modifier unsealed() {
        require(!contractSealed, "Contract sealed.");
        _;
    }

    constructor() {
        deployer = msg.sender;
    }
    
    function destroy() external onlyDeployer unsealed {
        selfdestruct(deployer);
    }
    
    function sealContract() external onlyDeployer unsealed {
        contractSealed = true;
    }

    function setPalette(bytes memory _palette) public onlyDeployer unsealed {
        palette = _palette;
    }

    function addAsset(uint8 index, string memory name, bytes memory encoding) public onlyDeployer unsealed {
        assets[index] = encoding;
        assetNames[index] = name;
    }

    function addComposites(uint64 key1, uint32 value1, uint64 key2, uint32 value2, uint64 key3, uint32 value3, uint64 key4, uint32 value4) public onlyDeployer unsealed {
        composites[key1] = value1;
        composites[key2] = value2;
        composites[key3] = value3;
        composites[key4] = value4;
    }

    function addPunks(uint8 index, bytes memory _punks) public onlyDeployer unsealed {
        punks[index] = _punks;
    }

    function initializeData() external onlyDeployer unsealed {
        setPalette(bytes("0x000000ff713f1dff8b532cff562600ff723709ffae8b61ffb69f82ff86581effa77c47ffdbb180ffe7cba9ffa66e2cffd29d60ffead9d9ffffffffffa58d8dffc9b2b2ff4a1201ff5f1d09ff711010ff7da269ff9bbc88ff5e7253ffff0000ff352410ff856f56ff6a563fffa98c6bffc8fbfbff9be0e0fff1ffffff75bdbdffd6000033692f08ff28b143ff794b11ff502f05ff00000099d60000ffc6c6c6ffdedede80e25b26ff80dbdaffca4e11ff933709ff0000004d86581e4d353535ff515151ff221e1766710cc7ff000000915c390fffc77514ff595959ff0040ffffdfdfdfff8c0d5bff690c45ffad2160ff555555ff0060c3ffe4eb17ff3cc300ffd60404ff8119b7ffb261dcff2c9541ff296434ffc9c9c9ffb1b1b1ff8d8d8dffb4b4b4ffdc1d1dff1a43c8ff1637a4ff142c7cffc28946ff2a2a2affe22626ff26314affffd800ff4c4c4cff636363ff000000403d2f1effffd926ffcae7fe701a6ed5ff855114ffbababa80683c08ff68461fffffc926ffd7d7d7fff0f0f0ff328dfdfffd3232ff2858b1ff2c5195ff293e64ff85561eff2d6b62ff005580ff229000ffc42110ff2c779599fff68eff8d5b4099ffba00ffff2a00ffe65700ffb500af99cd00cbff1c1a00ff534c00ffff8ebeff2c95419951360cff96200526"));
        addComposites(10185806010002644479, 2186294015, 334398324991, 2575063551, 14620934475063635199, 3064171007, 624958130687, 942481407);
        addComposites(14620934474510063359, 2762187007, 14620934474879159807, 2963512319, 13042617595322051839, 2938928127, 2458428176373342719, 1985954815);
        addComposites(278563750143, 2760204543, 16059517963269653503, 2210894079, 332820277759, 1467042303, 14620934475081336831, 3081476351);
        addComposites(9680520719389163519, 3670916095, 15420325347100056063, 3870207743, 14620934475182135807, 3131876095, 13042617595339753471, 2956101119);
        addComposites(14620934473855947775, 2393219071, 10817651969650973183, 3720264447, 2458428175552768511, 1500334335, 3204194146176141823, 1214078463);
        addComposites(14620934474525318911, 2761327103, 13455271899935706879, 3705185535, 277806277119, 2187872767, 2458428177130815743, 2440451839);
        addComposites(3204194145705263359, 1012292095, 333472686335, 1918714879, 333640851967, 2036417791, 13455271895641358336, 3115956608);
        addComposites(13455271899936325631, 3705462015, 333305515007, 1801675263, 625107741951, 1008997375, 13042617594783735551, 2737010175);
        addComposites(14620934474055434239, 2492830719, 13042617593975144703, 2400152063, 3212546037968450303, 1788899071, 624199407359, 622070271);
        addComposites(15420325346088280575, 3060748031, 10817651969396670719, 3499912959, 3204194146513854207, 1349150207, 14620934473716728063, 2306502911);
        addComposites(13042617594446023167, 2601938431, 624670219775, 823856639, 14620934474171358719, 2559082751, 16059517966881296127, 4008359679);
        addComposites(659029958143, 756616447, 16059517962586947584, 3722304896, 2458428177385118207, 2593033215, 16059517966881914879, 4008636159);
        addComposites(14620934473633893631, 2256762879, 14620934474187606527, 2575595007, 657129996543, 255, 278818052607, 2946737151);
        addComposites(14620934472271397119, 1499820287, 14620934476549587199, 3898962175, 334652627455, 2744621055, 3204194147069872127, 1568241151);
        addComposites(3212546038118047999, 1855475199, 15420325345267706367, 2407683327, 10817651968639197695, 2860209407, 15420325346845753599, 3666765567);
        addComposites(3212546037362036223, 1553031167, 3204194147052170495, 1551068159, 332091497215, 958599935, 276777868799, 1429149439);
        addComposites(332947134463, 1562579199, 16059517966381098751, 3766649599, 3204194147793461503, 1854308351, 10185806011788525823, 2910738943);
        addComposites(332612443647, 1328289023, 3212546037394458623, 1569407999, 627065225215, 1852731135, 14620934476566364159, 3908370431);
        addComposites(3204194147037449727, 1551864319, 3212546037376756991, 1552235007, 332141631231, 992022527, 14620934476565745407, 3908026623);
        addComposites(16059517962586947839, 1869574143, 14620934475656841727, 3403080191, 3204194147643863807, 1787732223, 626659142143, 1683507711);
        addComposites(3212546036838440703, 1350317055, 14620934476211542527, 3705662207, 330712482047, 255, 10185806011031052799, 2607762943);
        addComposites(626710403583, 1700683519, 2458428175344934399, 1379015423, 661070141951, 1582782463, 332297032703, 1112554239);
        addComposites(3212546036500728319, 1215245311, 333152933631, 1699888383, 659237792255, 843131647, 13455271895641358591, 1566399999);
        addComposites(10817651967610789375, 1983585023, 14620934474379192831, 2680204287, 624878053887, 910568959, 625383082239, 1129397247);
        addComposites(13042617595913745151, 3175592191, 3212546036029849855, 1013458943, 660815839487, 1481061375, 14620934475957240063, 3569924351);
        addComposites(14620934475655328511, 3402224895, 332900354559, 1531524095, 333773229823, 2135766783, 626456101119, 1582053375);
        addComposites(14620934475199767039, 3149113087, 10185806012042828287, 3012460031, 14620934475115949055, 3098848511, 625698628095, 1262234367);
        addComposites(14620934475048914431, 3065298943, 9680520715094196479, 672860671, 13042617595307331071, 2939724287, 625530462463, 1194928639);
        addComposites(660058366463, 1178085375, 332698436607, 1380069375, 625834164991, 1329936639, 15420325345059872255, 2234652671);
        addComposites(16059517964018603519, 2576980479, 14620934475804926207, 3485312767, 13042617596063342847, 3242168319, 0, 0);
//        addAsset(1, "Male 1", bytes("0x26000c2700043301863401c33501c33601f03701c33801c33901c33a01c33b01c342000a4302804301704402104401e04503804501704601b44701f04801f04901f04a01f04b01f052000a5301f05401f05503205501d05604105601e05701f05801f05901b45a015a5b000362000a6301f06401f06501f06601f067015a6801f06901a56a015a7200027301b47401f07503a07501507604417601a07701f07801f07901f07a0116830002840003850003860003870003880003890003"));
//        addAsset(2, "Male 2", bytes("0x26000c2700043305863405c33505c33605f03705c33805c33905c33a05c33b05c342000a4306804305704406104405e04507804505704605b44705f04805f04905f04a05f04b05f052000a5305f05405f05507205505d05608105605e05705f05805f05905b45a055a5b000362000a6305f06405f06505f06605f067055a6805f06905a56a055a7200027305b47405f07507a07505507608417605a07705f07805f07905f07a0516830002840003850003860003870003880003890003"));
        addAsset(3, "Male 3", bytes("0x26000c2700043309863409c33509c33609f03709c33809c33909c33a09c33b09c342000a430970430a804409e0440a10450b804509704609b44709f04809f04909f04a09f04b09f052000a5309f05409f0550b205509d0560c105609e05709f05809f05909b45a095a5b000362000a6309f06409f06509f06609f067095a6809f06909a56a095a7200027309b47409f0750ba0750950760c417609a07709f07809f07909f07a0916830002840003850003860003870003880003890003"));
//        addAsset(4, "Male 4", bytes("0x26000c270004330d86340dc3350dc3360df0370dc3380dc3390dc33a0dc33b0dc342000a430e80430d70440e10440de0450d70450f80460db4470df0480df0490df04a0df04b0df052000a530df0540df0550dd0550f20560de0561010570df0580df0590db45a0d5a5b000362000a630df0640df0650df0660df0670d5a680df0690da56a0d5a720002730db4740df0750d50750fa0760da1761040770df0780df0790df07a0d16830002840003850003860003870003880003890003"));
//        addAsset(5, "Female 1", bytes("0x34000835000c3601c337000d38000c3900044300084402814401604501f04603484601304701f04801f04901d24a01c34b01c353000a5401f05501f05603105604205601c05701f05801f05911405901b05a01695b01f063000a6401f06501f06601f06701f06801e16911506901a06a015a6b00037300027401b47501f07603527604807701f07801f07901787a0001840002850003860003870003880003890001"));
//        addAsset(6, "Female 2", bytes("0x34000835000c3605c337000d38000c3900044300084406814405604505f04607484605304705f04805f04905d24a05c34b05c353000a5405f05505f05608205607105605c05705f05805f05912405905b05a05695b05f063000a6405f06505f06605f06705f06805e16912506905a06a055a6b00037300027405b47505f07608827607507705f07805f07905787a0001840002850003860003870003880003890001"));
//        addAsset(7, "Female 3", bytes("0x34000835000c3609c337000d38000c390004430008440961440a804509f0460b484609304709f04809f04909d24a09c34b09c353000a5409f05509f0560c20560b105609c05709f05809f05913405909b05a09695b09f063000a6409f06509f06609f06709f06809e16913506909a06a095a6b00037300027409b47509f0760c82760b507709f07809f07909787a0001840002850003860003870003880003890001"));
//        addAsset(8, "Female 4", bytes("0x34000835000c360dc337000d38000c390004430008440e81440d60450df0460d38460f40470df0480df0490dd24a0dc34b0dc353000a540df0550df0560dc0560f10561020570df0580df0591340590db05a0d695b0df063000a640df0650df0660df0670df0680de1691350690da06a0d5a6b0003730002740db4750df0760f52761080770df0780df0790d787a0001840002850003860003870003880003890001"));
//        addAsset(9, "Zombie", bytes("0x26000c2700043314863414c33514c33614f03714c33814c33914c33a14c33b14c342000a4315804314704415104414e04514704516804614304616804617404714f04814f04914f04a14f04b14f052000a5314f05414f05514d05516205614e15714f05814f05914345916805a145a5b000362000a6314f06414f06514f06614f067145a6814f06914a56a145a7200027314b47414f07514507516a07614847616207617107714f07814f07914f07a1416830002840003850003860003870003880003890003"));
//        addAsset(10, "Ape", bytes("0x26000c2700043318863418c33518c33618f03718c33818c33918c33a18c33b18c342000a4318f0441878451970451a804619b44719d04718204819804818704919c34a18b44b18f052000a5318f054185a5519d0551a20561b105619e05719785819f05919a55a195a5b000362000a6318f064185a6519f06619f06719786819f06919a56a195a7200027318b47418d2751950751aa0761b417619a07719f07819b07818407919e17a1916830002840003850003860003870003880003890003"));
//        addAsset(11, "Alien", bytes("0x250008261c49270004331c86341cc3351cc3361ce0361d10371cc3381cc3391cc33a1cc33b1cc342000a431c70431e80441ce0441e10451c70451f80461cb4471cf0481cf0491cf04a1cf04b1cf052000a531cf0541cf0551cd2561ce0561d10571cf0581cf0591ca55a1c5a5b000362000a631cf0641cf0651cf0661cf0671cc0671d30681ce0681d10691ca56a1c5a720002731cb4741cf0751c58751f20761ca1761d40771cf0781cf0791ce17a1c16830002840003850003860003870003880003890003"));
//        addAsset(12, "Rosy Cheeks", bytes("0x472080482040572020772080782040"));
//        addPunks(0, bytes("0x067d7a7e0000000001224a00000000000760000000000000012d401400000000021a3d2d23000000067d81610000000002350000000000000657565e00000000010d4100000000000238331200000000057b4e000000000006834f7200000000056c6500000000000783707c00000000054d4b5f00000000040d2d1500000000023d461d0000000003184a00000000000245470000000000054d6b84000000000332000000000000033d411f00000000056c4b000000000003303d350000000003220f000000000005560000000000000663000000000000033d3a00000000000132230000000000067d8184000000000128260000000000056200000000000003182b0000000000033a000000000000076c580000000000012a3d3a133e0000065c00000000000005695e0000000000076c58660000000003181e150000000003223b2f0000000001452d2700000000056073000000000006810000000000000341000000000000021b3d0000000000066c4f00000000000116000000000000034a230000000000056b61000000000002373c000000000002453d2d0000000001173d1614000000077f7c00000000000143000000000000032c000000000000011e000000000000033f00000000000002284300000000000445100000000000076c6200000000000763000000000000054d7d825e000000013d1e1d00000000066c700000000000066e670000000000054c000000000000056c815400000000013514000000000002283c0000000000067d517352000000076c817e00000000012a3d3c1400000006837d6b0000000001173d0f000000000317162c00000000033513000000000001304600000000000230162c00000000012a0f000000000004112d0000000000033f1d0000000000043f000000000000031e201d00000000033d4123000000000551000000000000054d7d717e000000033d430000000000074d690000000000055000000000000002432c0000000000077f6d0000000000076c795900000000076b000000000000057d795200000000023d4a0000000000077a000000000000022d00000000000007836374000000000243130000000000"));
//        addPunks(1, bytes("0x064c0000000000000233140000000000020d39000000000005837a7e0000000001283d322c00000003240000000000000770000000000000023f00000000000007836e000000000001303d3c00000000056c7d8273000000013016000000000002383d2f3e000000044a000000000000055c000000000000057d81000000000005837d5a5e000000094241000000000007836b0000000000023d260000000000064c7c0000000000076c5a0000000000034a130000000000065756000000000002283d3a00000000076c4c7c00000000043d3f132c0000000662720000000000031b3b3320000000034419133e000000034a000000000000064d4f00000000000124000000000000043b1c40000000000233000000000000031900000000000001171e2700000000014100000000000003463e000000000002352c0000000000054d000000000000013b3f4800000000034a15000000000003253e0000000000010d311300000000032d000000000000033d4a000000000004241500000000000243000000000000030d412300000000066c7d000000000002462b0000000000030f270000000000023d26470000000001173d4300000000010e12000000000001191d00000000000226130000000000031a2d1500000000033d460000000000066c6f5e00000000054d5800000000000228313e00000000011e2c0000000000066277000000000002420f1300000000011e150000000000064d6e000000000007857a4e00000000064d565200000000031b3a1f00000000021b3d4600000000066c7a5400000000054d555d5f5e0000013d2d3e000000000226230000000000056c7d6052000000010d2f0000000000023c0000000000000417241f00000000054d4b0000000000014a000000000000043a0000000000000317000000000000057a7e0000000000074d5600000000000111320000000000077f000000000000013d3a1400000000076c750000000000013f000000000000057b000000000000023d241412000000077d4c7e00000000032d2700000000000770590000000000074d4c7c0000000001312c0000000000020d2500000000000765660000000000"));        
        addPunks(2, bytes("0x0560000000000000064d63734e000000076c7d6e000000000336411500000000023215000000000002280f23000000000319131200000000033a402c00000000023d1e4800000000054d620000000000067d4f0000000000011a240000000000054d510000000000065100000000000001424a0000000000067b000000000000022f000000000000023b3d0f00000000031b30261500000005807d6b5e000000043f230000000000014546131f0000000335401d00000000032a321400000000033d3f1314000000064d7d5b00000000064d0000000000000656000000000000023a1d00000000000341130000000000010d160000000000067d625f0000000005604e0000000000084d6b0000000000031614000000000003311300000000000345390000000000014a150000000000064f72000000000001181a4a0000000006707c00000000000753000000000000058362000000000003363d3313000000076c6052000000000563000000000000040d3d2f0000000005827e0000000000055d610000000000075b000000000000067d58720000000007827e0000000000041b1900000000000565720000000000033c00000000000003111e0000000000013d3c202c00000003182600000000000230190000000000033d194700000000011c480000000000058356000000000005655200000000000445410000000000087d56000000000001443d1900000000013d351d00000000013c1200000000000771000000000000010d3d431d000000065c5e000000000002460000000000000234410000000000031923000000000003303d2615000000066c6261000000000751000000000000075c00000000000008834f0000000000066c704e00000000043d0000000000000300000000000000084f660000000000074d5800000000000424000000000000076c630000000000041a2d0000000000087b736100000000041e00000000000006756400000000000653000000000000023d24000000000007834c000000000003300f0000000000013d43230000000002181e00000000000224000000000000024532000000000007810000000000000145350000000000"));        
    }

    /**
     * The Cryptopunk image for the given index.
     * The image is represented in a row-major byte array where each set of 4 bytes is a pixel in RGBA format.
     * @param index the punk index, 0 <= index < 10000
     */
    function punkImage(uint16 index) public view returns (bytes memory) {
        require(index >= 0 && index < 10000);
        bytes memory pixels = new bytes(2304);
        for (uint j = 0; j < 8; j++) {
            uint8 asset = uint8(punks[uint8(index / 100)][(index % 100) * 8 + j]);
            if (asset > 0) {
                bytes storage a = assets[asset];
                uint n = a.length / 3;
                for (uint i = 0; i < n; i++) {
                    uint[4] memory v = [
                        uint(uint8(a[i * 3]) & 0xF0) >> 4,
                        uint(uint8(a[i * 3]) & 0xF),
                        uint(uint8(a[i * 3 + 2]) & 0xF0) >> 4,
                        uint(uint8(a[i * 3 + 2]) & 0xF)
                    ];
                    for (uint dx = 0; dx < 2; dx++) {
                        for (uint dy = 0; dy < 2; dy++) {
                            uint p = ((2 * v[1] + dy) * 24 + (2 * v[0] + dx)) * 4;
                            if (v[2] & (1 << (dx * 2 + dy)) != 0) {
                                bytes4 c = composite(a[i * 3 + 1],
                                        pixels[p],
                                        pixels[p + 1],
                                        pixels[p + 2],
                                        pixels[p + 3]
                                    );
                                pixels[p] = c[0];
                                pixels[p+1] = c[1];
                                pixels[p+2] = c[2];
                                pixels[p+3] = c[3];
                            } else if (v[3] & (1 << (dx * 2 + dy)) != 0) {
                                pixels[p] = 0;
                                pixels[p+1] = 0;
                                pixels[p+2] = 0;
                                pixels[p+3] = 0xFF;
                            }
                        }
                    }
                }
            }
        }
        return pixels;
    }

    /**
     * The Cryptopunk image for the given index, in SVG format.
     * In the SVG, each "pixel" is represented as a 1x1 rectangle.
     * @param index the punk index, 0 <= index < 10000
     */
    function punkImageSvg(uint16 index) external view returns (string memory svg) {
        bytes memory pixels = punkImage(index);
        svg = string(abi.encodePacked(SVG_HEADER));
        bytes memory buffer = new bytes(8);
        for (uint y = 0; y < 24; y++) {
            for (uint x = 0; x < 24; x++) {
                uint p = (y * 24 + x) * 4;
                if (uint8(pixels[p + 3]) > 0) {
                    for (uint i = 0; i < 4; i++) {
                        uint8 value = uint8(pixels[p + i]);
                        buffer[i * 2 + 1] = _HEX_SYMBOLS[value & 0xf];
                        value >>= 4;
                        buffer[i * 2] = _HEX_SYMBOLS[value & 0xf];
                    }
                    svg = string(abi.encodePacked(svg,
                        '<rect x="', toString(x), '" y="', toString(y),'" width="1" height="1" shape-rendering="crispEdges" fill="#', string(buffer),'"/>'));
                }
            }
        }
        svg = string(abi.encodePacked(svg, SVG_FOOTER));
    }

    /**
     * The Cryptopunk attributes for the given index.
     * The attributes are a comma-separated list in UTF-8 string format.
     * The first entry listed is not technically an attribute, but the "head type" of the Cryptopunk.
     * @param index the punk index, 0 <= index < 10000
     */
    function punkAttributes(uint16 index) external view returns (string memory text) {
        require(index >= 0 && index < 10000);
        uint8 cell = uint8(index / 100);
        uint offset = (index % 100) * 8;
        for (uint j = 0; j < 8; j++) {
            uint8 asset = uint8(punks[cell][offset + j]);
            if (asset > 0) {
                if (j > 0) {
                    text = string(abi.encodePacked(text, ", ", assetNames[asset]));
                } else {
                    text = assetNames[asset];
                }
            } else {
                break;
            }
        }
    }

    function composite(byte index, byte yr, byte yg, byte yb, byte ya) internal view returns (bytes4 rgba) {
        uint x = uint(uint8(index)) * 4;
        uint8 xAlpha = uint8(palette[x + 3]);
        if (xAlpha == 0xFF) {
            rgba = bytes4(uint32(
                    (uint(uint8(palette[x])) << 24) |
                    (uint(uint8(palette[x+1])) << 16) |
                    (uint(uint8(palette[x+2])) << 8) |
                    xAlpha
                ));
        } else {
            uint64 key =
                (uint64(uint8(palette[x])) << 56) |
                (uint64(uint8(palette[x + 1])) << 48) |
                (uint64(uint8(palette[x + 2])) << 40) |
                (uint64(xAlpha) << 32) |
                (uint64(uint8(yr)) << 24) |
                (uint64(uint8(yg)) << 16) |
                (uint64(uint8(yb)) << 8) |
                (uint64(uint8(ya)));
            rgba = bytes4(composites[key]);
        }
    }

    //// String stuff from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol

    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

}