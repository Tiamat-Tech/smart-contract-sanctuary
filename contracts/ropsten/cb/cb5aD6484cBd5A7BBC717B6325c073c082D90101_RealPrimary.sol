/**
 *Submitted for verification at Etherscan.io on 2021-08-21
*/

// SPDX-License-Identifier: GPL-3.0-only
pragma solidity >=0.7.0 <0.8.0;

contract RealPrimary {
    
    NewReal[] public newReals; // the array that includes all the reals 
    
    uint indexInArray = 0; // the index of the newReals array.
    
    mapping(uint => uint) public  realListFromIdToArray; // this is mapping of the id, which has been generated by the local system, with the index number in the newReals array. 
    
    event Event(
       address owner,
       bytes16 photo,
       uint indexed id,
       uint256 value,
       address contractAddress,
       bool availability
    ); // the events will be globally presented in the smart contract account in the etherscan.
    
   function setReal(address payable _owner_1, uint256  _value_1, uint _id, bytes16 _md5_hash_picture) public { // register a new real estate.
        
      newReals.push( new NewReal(_owner_1, _value_1, _id, _md5_hash_picture)); // push a new real estate in the arreay.
      
      realListFromIdToArray[_id] = indexInArray; // link the id number with the indexInArray.
      
      indexInArray = indexInArray +1; //when a new real estate is added, indexInArray will be increased by 1.
      
       emit Event(
        newReals[realListFromIdToArray[_id]].getOwner(),
        newReals[realListFromIdToArray[_id]].getMd5HashPicture(),
        newReals[realListFromIdToArray[_id]].getId(),
        newReals[realListFromIdToArray[_id]].getValue(),
        newReals[realListFromIdToArray[_id]].getThisContractAddress(),
        newReals[realListFromIdToArray[_id]].getAvailable()
   ); // update the events.
   }
   
    function buy(uint _id) payable public  { 
      
      require(newReals[realListFromIdToArray[_id]].getValue() == msg.value, 'The price is not equal the actual price'); // first condition, the price should be equal the real estate price.
      
      require(newReals[realListFromIdToArray[_id]].getAvailable() == true, 'The property is sold'); // second condition, the real estate should be available.

      newReals[realListFromIdToArray[_id]].getOwner().transfer(msg.value); // transfer the amount to the previous owner.
        
      newReals[realListFromIdToArray[_id]].setUnavailable(msg.sender); // update the address to the new owner's address.
      
       emit Event(
        newReals[realListFromIdToArray[_id]].getOwner(),
        newReals[realListFromIdToArray[_id]].getMd5HashPicture(),
        newReals[realListFromIdToArray[_id]].getId(),
        newReals[realListFromIdToArray[_id]].getValue(),
        newReals[realListFromIdToArray[_id]].getThisContractAddress(),
        newReals[realListFromIdToArray[_id]].getAvailable()
   ); // update the events.
      
    }
    
    
    function getAnyContractAddress(uint _id) public view returns (address) { // return the hash address of the offer according to the id, which has been generated by the local system.
    
    return  newReals[realListFromIdToArray[_id]].getThisContractAddress();

   }
   
   function getAvailablilityForAnyContract(uint _id) public view returns (bool) { // return the current availability of the offer according to the id, which has been generated by the local system.
    
    return newReals[realListFromIdToArray[_id]].getAvailable();

   }
   
   function getValueForAnyContract(uint _id) public view returns (uint256) { // return the price of the offer according to the id, which has been generated by the local system.
    
    return newReals[realListFromIdToArray[_id]].getValue();

   }
   
   function getOwnerForAnyContract(uint _id) public view returns (address) { // return the current owner of the offer according to the id, which has been generated by the local system.
    
    return newReals[realListFromIdToArray[_id]].getOwner();

   }
   
  
}

contract NewReal{ // this the sub contract that will generated by the main contract RealPrimary
    
   address payable owner;
   uint256  value;
   uint id;
   bytes16 md5_hash_picture; // this is the hash value of this property's photo ,which has been uploaded by the local system.
   bool available;
   
   constructor(address payable _owner, uint256 _value, uint _id, bytes16   _md5_hash_picture){
    id = _id;
    owner = _owner;
    value = _value;
    md5_hash_picture = _md5_hash_picture;
    available = true; // if this variable is true, then the property is for sell now.
   
   }
   
   function getOwner()   public view  returns (address payable) { // return the owner of this offer.
    
    return owner;
   
   }
    function getValue()  public view returns (uint256) { // return the value of this offer.
    
    return value;
   }
   
   function getId()  public view returns (uint) { // return the id of this offer.
    
    return id;
   }
   
   function getMd5HashPicture()  public view returns (bytes16) { // return the hash value of the property' photo of this offer.
    
    return md5_hash_picture;
   }
   
    function getAvailable() public view returns (bool) { // return the current availability of this offer.
    
    return available;
   }
   
   function getThisContractAddress() public view returns (address) { // return the hash address of this offer.
    
    return address(this);
   }
   
   
   function setUnavailable(address payable newOwner) public { // update the owner address from the previous owner address to the msg.sender address.
    
    owner = newOwner;
    available = false;
    
   }
   
}