/**
 *Submitted for verification at Etherscan.io on 2021-10-31
*/

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol



pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and make it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts/utils/Strings.sol



pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// File: QuiltGenerator.sol

//SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.0;


library QuiltGenerator {
    struct QuiltStruct1 {
        uint256 hair;
        uint256 body;
        
    }

    struct QuiltStruct2 {
        uint256 dress;
        uint256 lips;
        uint256 lipsColor;
        uint256 glasses;
        uint256 necklace;
        uint256 eyesColor;
        
    }

      struct RandValues1{
        uint256 hair;
        uint256 body;

      }
      
    struct RandValues2 {
        uint256 dress;
        uint256 lips;
        uint256 lipsColor;
        uint256 glasses;
        uint256 necklace;
        uint256 eyesColor;
    }



    
        function getQuiltForSeedPart1(string memory seed)
            external
            pure
            returns (QuiltStruct1 memory, string memory)
        {
            QuiltStruct1 memory quilt;
            RandValues1 memory rand;
    
            // Determine how big the quilt is
            rand.hair = random(seed, "hair") % 17;
            rand.body = random(seed, "body") % 3;
            
            quilt.hair = rand.hair;
            quilt.body = rand.body;
    
    
    string[3][3] memory body_colors = [
        ["#956e55","#7c5a49","#a2795c"],
        ["#fdc88e","#f5b97a","#ffd7a3"],
        ["#ffd7a3","#fdc88e","#ffe1b2"] ];
    
    string[3] memory face_shadow = ['#956E55','#fdc88e','#ffd7a3'];

            string memory generate_body= string(abi.encodePacked('<path style="fill:',
            body_colors[rand.body][0],
            '" d="m380.378 436.829-9.188-68.908a40 40 0 0 0-25.837-32.253l-54.412-20.02a16 16 0 0 1-10.94-15.179v-25.802l34.461-14.359A48 48 0 0 0 344 216v-8c13.255 0 24-10.745 24-24s-10.745-24-24-24v-16c0-22.092-17.909-56-40-56H160c-22.091 0-40 33.909-40 56v16c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308L184 274.667v25.801a16 16 0 0 1-10.94 15.179l-54.412 20.02a40 40 0 0 0-25.837 32.253l-9.188 68.908C81.705 451.216 92.898 464 107.413 464h249.175c14.515 0 25.708-12.784 23.79-27.171z"/><path style="fill:',
        body_colors[rand.body][1],
        '" d="m280 274.667-96-21.334v47.135c0 5.759-3.186 10.831-8.017 13.659C243.077 325.871 280 274.667 280 274.667z"/><path style="fill:',
           body_colors[rand.body][2],
     '" d="M344 160v-16c0-22.092-17.909-56-40-56H160c-22.091 0-40 33.909-40 56v16c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.691 21.538a79.988 79.988 0 0 0 61.539 0l51.694-21.539A47.997 47.997 0 0 0 344 216v-8c13.255 0 24-10.745 24-24s-10.745-24-24-24z"/>'));
        
    
    string[17] memory generate_back_hair=[
        '<path style="fill:#6e4439" d="M320 32s23.5-32 64-32 64 30.667 64 72c0 41.967-46.667 154.667-24 224 0 0-60-20.667-80-104-18.34-76.418 8-128 8-128l-32-32z"/><path style="fill:#5e342e" d="M347 40s26.5-19 45-8c40.721 24.213 7.454 90.732 0 128-10 50-6 98 32 136 0 0-60-20.667-80-104-18.34-76.418 3-128 3-128V40z"/><path style="fill:#bd445a" d="M356.092 50.666a8 8 0 0 0 .628-11.296l-19.461-21.75a8 8 0 0 0-11.296-.628 8 8 0 0 0-.628 11.296l19.461 21.75a8 8 0 0 0 11.296.628z"/><path style="fill:#6e4439" d="M144 32S120.5 0 80 0 16 30.667 16 72c0 41.967 46.667 154.667 24 224 0 0 60-20.667 80-104 18.34-76.418-8-128-8-128l32-32z"/><path style="fill:#5e342e" d="M117 40s-26.5-19-45-8c-40.721 24.213-7.454 90.732 0 128 10 50 6 98-32 136 0 0 60-20.667 80-104 18.34-76.418-3-128-3-128V40z"/><path style="fill:#bd445a" d="M107.909 50.666a8 8 0 0 1-.628-11.296l19.461-21.75a8 8 0 0 1 11.296-.628 8 8 0 0 1 .628 11.296l-19.461 21.75a8 8 0 0 1-11.296.628z"/>',
        '',
        '<path style="fill:#734a3e" d="M418 357.5c-7.5-16-1.059-19.938-5.667-36.833-3-11-9.703-15.446-12-24.667-2.182-8.755 1.63-24.004-.667-31.333-4.148-13.24-9.351-16.738-12-27.667-2.667-11 4.333-19.333 2-31-2.923-14.618-8.177-20.607-10.333-28.333-4-14.333-2.774-17.918-2.333-29.667 1-26.667-9.17-59.4-17-76-8.864-18.792-20.498-29.281-34.314-35H232v395c110 1 200-32 200-32-.333-28.667-5.297-23.934-14-42.5z"/><path style="fill:#623f33" d="M138.314 37c-13.817 5.719-25.45 16.208-34.314 35-7.83 16.6-18 49.333-17 76 .44 11.748 1.667 15.333-2.333 29.667-2.156 7.726-7.41 13.716-10.333 28.333-2.333 11.667 4.667 20 2 31-2.649 10.929-7.852 14.427-12 27.667-2.297 7.33 1.515 22.578-.667 31.333-2.297 9.221-9 13.667-12 24.667C47.059 337.562 53.5 341.5 46 357.5c-8.703 18.565-13.667 13.833-14 42.5 0 0 90 33 200 32V37h-93.686z"/>',
        '<path style="fill:#6e4439" d="M360 48c-6.667-12.667-26.667-32-72-32v160h72s12.422-104.4 0-128z"/>',
        '<path style="fill:#9d6e48" d="M392 312s-24-139.333-24-192l-96 144 104 56c-5 9.5-9.529 22.472 8 40 15.5 15.5 24 48 24 48 22-82-16-96-16-96z"/><path style="fill:#ffb04d" d="m374.878 329.301 22.087-10.888a7.997 7.997 0 1 0-7.072-14.346l-22.087 10.888a7.997 7.997 0 0 0-3.636 10.712 7.996 7.996 0 0 0 10.708 3.634z"/><path style="fill:#8d5f3d" d="m191.999 264-96-144c0 52.667-24 192-24 192s-38 14-16 96c0 0 8.5-32.5 24-48 17.529-17.529 13-30.5 8-40l104-56z"/><path style="fill:#ffb04d" d="m89.122 329.301-22.087-10.888a7.997 7.997 0 1 1 7.072-14.346l22.087 10.888a7.997 7.997 0 1 1-7.072 14.346z"/>',
        '<path style="fill:#734a3e" d="M418 357.5c-7.5-16-1.059-19.938-5.667-36.833-3-11-9.703-15.446-12-24.667-2.182-8.755 1.63-24.004-.667-31.333-4.148-13.24-9.351-16.738-12-27.667-2.667-11 4.333-19.333 2-31-2.923-14.618-8.177-20.607-10.333-28.333-4-14.333-2.774-17.918-2.333-29.667 1-26.667-9.17-59.4-17-76-8.864-18.792-20.498-29.281-34.314-35H232v395c110 1 200-32 200-32-.333-28.667-5.297-23.934-14-42.5z"/><path style="fill:#623f33" d="M138.314 37c-13.817 5.719-25.45 16.208-34.314 35-7.83 16.6-18 49.333-17 76 .44 11.748 1.667 15.333-2.333 29.667-2.156 7.726-7.41 13.716-10.333 28.333-2.333 11.667 4.667 20 2 31-2.649 10.929-7.852 14.427-12 27.667-2.297 7.33 1.515 22.578-.667 31.333-2.297 9.221-9 13.667-12 24.667C47.059 337.562 53.5 341.5 46 357.5c-8.703 18.565-13.667 13.833-14 42.5 0 0 90 33 200 32V37h-93.686z"/>',
        '<path style="fill:#6e4439" d="M360 48c-6.667-12.667-26.667-32-72-32v160h72s12.422-104.4 0-128z"/>',
        '<path style="fill:#9d6e48" d="M392 312s-24-139.333-24-192l-96 144 104 56c-5 9.5-9.529 22.472 8 40 15.5 15.5 24 48 24 48 22-82-16-96-16-96z"/><path style="fill:#ffb04d" d="m374.878 329.301 22.087-10.888a7.997 7.997 0 1 0-7.072-14.346l-22.087 10.888a7.997 7.997 0 0 0-3.636 10.712 7.996 7.996 0 0 0 10.708 3.634z"/><path style="fill:#8d5f3d" d="m191.999 264-96-144c0 52.667-24 192-24 192s-38 14-16 96c0 0 8.5-32.5 24-48 17.529-17.529 13-30.5 8-40l104-56z"/><path style="fill:#ffb04d" d="m89.122 329.301-22.087-10.888a7.997 7.997 0 1 1 7.072-14.346l22.087 10.888a7.997 7.997 0 1 1-7.072 14.346z"/>',
        '<path style="fill:#734a3e" d="M418 357.5c-7.5-16-1.059-19.938-5.667-36.833-3-11-9.703-15.446-12-24.667-2.182-8.755 1.63-24.004-.667-31.333-4.148-13.24-9.351-16.738-12-27.667-2.667-11 4.333-19.333 2-31-2.923-14.618-8.177-20.607-10.333-28.333-4-14.333-2.774-17.918-2.333-29.667 1-26.667-9.17-59.4-17-76-8.864-18.792-20.498-29.281-34.314-35H232v395c110 1 200-32 200-32-.333-28.667-5.297-23.934-14-42.5z"/><path style="fill:#623f33" d="M138.314 37c-13.817 5.719-25.45 16.208-34.314 35-7.83 16.6-18 49.333-17 76 .44 11.748 1.667 15.333-2.333 29.667-2.156 7.726-7.41 13.716-10.333 28.333-2.333 11.667 4.667 20 2 31-2.649 10.929-7.852 14.427-12 27.667-2.297 7.33 1.515 22.578-.667 31.333-2.297 9.221-9 13.667-12 24.667C47.059 337.562 53.5 341.5 46 357.5c-8.703 18.565-13.667 13.833-14 42.5 0 0 90 33 200 32V37h-93.686z"/>',
        '<path style="fill:#6e4439" d="M360 48c-6.667-12.667-26.667-32-72-32v160h72s12.422-104.4 0-128z"/>',
        '<path style="fill:#9d6e48" d="M392 312s-24-139.333-24-192l-96 144 104 56c-5 9.5-9.529 22.472 8 40 15.5 15.5 24 48 24 48 22-82-16-96-16-96z"/><path style="fill:#ffb04d" d="m374.878 329.301 22.087-10.888a7.997 7.997 0 1 0-7.072-14.346l-22.087 10.888a7.997 7.997 0 0 0-3.636 10.712 7.996 7.996 0 0 0 10.708 3.634z"/><path style="fill:#8d5f3d" d="m191.999 264-96-144c0 52.667-24 192-24 192s-38 14-16 96c0 0 8.5-32.5 24-48 17.529-17.529 13-30.5 8-40l104-56z"/><path style="fill:#ffb04d" d="m89.122 329.301-22.087-10.888a7.997 7.997 0 1 1 7.072-14.346l22.087 10.888a7.997 7.997 0 1 1-7.072 14.346z"/>',
        '<path style="fill:#734a3e" d="M418 357.5c-7.5-16-1.059-19.938-5.667-36.833-3-11-9.703-15.446-12-24.667-2.182-8.755 1.63-24.004-.667-31.333-4.148-13.24-9.351-16.738-12-27.667-2.667-11 4.333-19.333 2-31-2.923-14.618-8.177-20.607-10.333-28.333-4-14.333-2.774-17.918-2.333-29.667 1-26.667-9.17-59.4-17-76-8.864-18.792-20.498-29.281-34.314-35H232v395c110 1 200-32 200-32-.333-28.667-5.297-23.934-14-42.5z"/><path style="fill:#623f33" d="M138.314 37c-13.817 5.719-25.45 16.208-34.314 35-7.83 16.6-18 49.333-17 76 .44 11.748 1.667 15.333-2.333 29.667-2.156 7.726-7.41 13.716-10.333 28.333-2.333 11.667 4.667 20 2 31-2.649 10.929-7.852 14.427-12 27.667-2.297 7.33 1.515 22.578-.667 31.333-2.297 9.221-9 13.667-12 24.667C47.059 337.562 53.5 341.5 46 357.5c-8.703 18.565-13.667 13.833-14 42.5 0 0 90 33 200 32V37h-93.686z"/>',
        '<path style="fill:#6e4439" d="M360 48c-6.667-12.667-26.667-32-72-32v160h72s12.422-104.4 0-128z"/>',
        '<path style="fill:#9d6e48" d="M392 312s-24-139.333-24-192l-96 144 104 56c-5 9.5-9.529 22.472 8 40 15.5 15.5 24 48 24 48 22-82-16-96-16-96z"/><path style="fill:#ffb04d" d="m374.878 329.301 22.087-10.888a7.997 7.997 0 1 0-7.072-14.346l-22.087 10.888a7.997 7.997 0 0 0-3.636 10.712 7.996 7.996 0 0 0 10.708 3.634z"/><path style="fill:#8d5f3d" d="m191.999 264-96-144c0 52.667-24 192-24 192s-38 14-16 96c0 0 8.5-32.5 24-48 17.529-17.529 13-30.5 8-40l104-56z"/><path style="fill:#ffb04d" d="m89.122 329.301-22.087-10.888a7.997 7.997 0 1 1 7.072-14.346l22.087 10.888a7.997 7.997 0 1 1-7.072 14.346z"/>',
        '<path style="fill:#734a3e" d="M418 357.5c-7.5-16-1.059-19.938-5.667-36.833-3-11-9.703-15.446-12-24.667-2.182-8.755 1.63-24.004-.667-31.333-4.148-13.24-9.351-16.738-12-27.667-2.667-11 4.333-19.333 2-31-2.923-14.618-8.177-20.607-10.333-28.333-4-14.333-2.774-17.918-2.333-29.667 1-26.667-9.17-59.4-17-76-8.864-18.792-20.498-29.281-34.314-35H232v395c110 1 200-32 200-32-.333-28.667-5.297-23.934-14-42.5z"/><path style="fill:#623f33" d="M138.314 37c-13.817 5.719-25.45 16.208-34.314 35-7.83 16.6-18 49.333-17 76 .44 11.748 1.667 15.333-2.333 29.667-2.156 7.726-7.41 13.716-10.333 28.333-2.333 11.667 4.667 20 2 31-2.649 10.929-7.852 14.427-12 27.667-2.297 7.33 1.515 22.578-.667 31.333-2.297 9.221-9 13.667-12 24.667C47.059 337.562 53.5 341.5 46 357.5c-8.703 18.565-13.667 13.833-14 42.5 0 0 90 33 200 32V37h-93.686z"/>',
        '<path style="fill:#6e4439" d="M360 48c-6.667-12.667-26.667-32-72-32v160h72s12.422-104.4 0-128z"/>',
        '<path style="fill:#9d6e48" d="M392 312s-24-139.333-24-192l-96 144 104 56c-5 9.5-9.529 22.472 8 40 15.5 15.5 24 48 24 48 22-82-16-96-16-96z"/><path style="fill:#ffb04d" d="m374.878 329.301 22.087-10.888a7.997 7.997 0 1 0-7.072-14.346l-22.087 10.888a7.997 7.997 0 0 0-3.636 10.712 7.996 7.996 0 0 0 10.708 3.634z"/><path style="fill:#8d5f3d" d="m191.999 264-96-144c0 52.667-24 192-24 192s-38 14-16 96c0 0 8.5-32.5 24-48 17.529-17.529 13-30.5 8-40l104-56z"/><path style="fill:#ffb04d" d="m89.122 329.301-22.087-10.888a7.997 7.997 0 1 1 7.072-14.346l22.087 10.888a7.997 7.997 0 1 1-7.072 14.346z"/>'
    ];
    
    
    
    string[17] memory generate_front_hair = [
         string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         '" d="M239.943 97.356 230 84c-23.667 54-86.783 63.591-110 64.795V160c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-44.711c22.658-7.909 85.818-33.699 87.943-76.031z"/><path style="fill:#6e4439" d="M272 0c-26 0-40 8-40 8s-14-8-40-8-124.667 50.055-88 166.055c0 0 128-22.722 128-78.055 0 55.333 128 78.055 128 78.055C396.667 50.055 298 0 272 0z"/><path style="fill:#653c34" d="M232 8.004V8s-14-8-40-8-124.666 50.055-88 166.055c0 0 15.495-2.757 35.69-8.67C117.089 53.368 207.192 8.084 232 8.004z"/>'
        )),
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M301.472 127H120v89a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-57.617c72 0 125.396-1.218 149.472-33.481z"/><path style="fill:#ffc85c" d="M325.257 270.564C349.18 263.62 374.77 254.584 384 248c-3.521-48.608-8.837-94.149-16.215-130.726C353.4 45.96 297.633 0 232 0S110.6 45.96 96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 49.5-7.5 56.5 12 112 0l8-16 8 8h32l16-24s2.942 76.874 5.257 158.564z"/><path style="fill:#f6b45e" d="M96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 13.205-2.001 23.345-2.055 32.229-1.324C178.965 79.792 208.193 0 232 0 166.368 0 110.601 45.96 96.215 117.274z"/>'
        )),
        
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M239.899 99 228 92s-20.648 26.536-76 40c-27.75 6.75-32 28-32 28h-.001C106.745 160.001 96 170.746 96 184c0 13.255 10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625V159c22-16.333 77-14.333 87.899-60z"/><path style="fill:#734a3e" d="M256.072 0c-16.242 0-23.667 7.577-24.036 7.963C231.667 7.577 224.243 0 208 0 163.75 0 65.5 61 104 152l16 8c28.733-28.733 110.532-24.057 112.036-62.914 1.504 38.857 83.302 34.181 112.036 62.914l16-8c38.5-91-59.75-152-104-152z"/><path style="fill:#623f33" d="M208 0C163.75 0 65.5 61 104 152v8h16c6.312-6.312 15.188-11.01 25.21-14.913C150.5 50.5 201.691.667 232 8l.023-.046C231.777 7.691 224.385 0 208 0z"/>'
        )),
        
         string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         '" d="M239.943 97.356 230 84c-23.667 54-86.783 63.591-110 64.795V160c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-44.711c22.658-7.909 85.818-33.699 87.943-76.031z"/><path style="fill:#6e4439" d="M272 0c-26 0-40 8-40 8s-14-8-40-8-124.667 50.055-88 166.055c0 0 128-22.722 128-78.055 0 55.333 128 78.055 128 78.055C396.667 50.055 298 0 272 0z"/><path style="fill:#653c34" d="M232 8.004V8s-14-8-40-8-124.666 50.055-88 166.055c0 0 15.495-2.757 35.69-8.67C117.089 53.368 207.192 8.084 232 8.004z"/>'
        )),
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M301.472 127H120v89a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-57.617c72 0 125.396-1.218 149.472-33.481z"/><path style="fill:#ffc85c" d="M325.257 270.564C349.18 263.62 374.77 254.584 384 248c-3.521-48.608-8.837-94.149-16.215-130.726C353.4 45.96 297.633 0 232 0S110.6 45.96 96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 49.5-7.5 56.5 12 112 0l8-16 8 8h32l16-24s2.942 76.874 5.257 158.564z"/><path style="fill:#f6b45e" d="M96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 13.205-2.001 23.345-2.055 32.229-1.324C178.965 79.792 208.193 0 232 0 166.368 0 110.601 45.96 96.215 117.274z"/>'
        )),
        
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M239.899 99 228 92s-20.648 26.536-76 40c-27.75 6.75-32 28-32 28h-.001C106.745 160.001 96 170.746 96 184c0 13.255 10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625V159c22-16.333 77-14.333 87.899-60z"/><path style="fill:#734a3e" d="M256.072 0c-16.242 0-23.667 7.577-24.036 7.963C231.667 7.577 224.243 0 208 0 163.75 0 65.5 61 104 152l16 8c28.733-28.733 110.532-24.057 112.036-62.914 1.504 38.857 83.302 34.181 112.036 62.914l16-8c38.5-91-59.75-152-104-152z"/><path style="fill:#623f33" d="M208 0C163.75 0 65.5 61 104 152v8h16c6.312-6.312 15.188-11.01 25.21-14.913C150.5 50.5 201.691.667 232 8l.023-.046C231.777 7.691 224.385 0 208 0z"/>'
        )),
        
         string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         '" d="M239.943 97.356 230 84c-23.667 54-86.783 63.591-110 64.795V160c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-44.711c22.658-7.909 85.818-33.699 87.943-76.031z"/><path style="fill:#6e4439" d="M272 0c-26 0-40 8-40 8s-14-8-40-8-124.667 50.055-88 166.055c0 0 128-22.722 128-78.055 0 55.333 128 78.055 128 78.055C396.667 50.055 298 0 272 0z"/><path style="fill:#653c34" d="M232 8.004V8s-14-8-40-8-124.666 50.055-88 166.055c0 0 15.495-2.757 35.69-8.67C117.089 53.368 207.192 8.084 232 8.004z"/>'
        )),
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M301.472 127H120v89a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-57.617c72 0 125.396-1.218 149.472-33.481z"/><path style="fill:#ffc85c" d="M325.257 270.564C349.18 263.62 374.77 254.584 384 248c-3.521-48.608-8.837-94.149-16.215-130.726C353.4 45.96 297.633 0 232 0S110.6 45.96 96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 49.5-7.5 56.5 12 112 0l8-16 8 8h32l16-24s2.942 76.874 5.257 158.564z"/><path style="fill:#f6b45e" d="M96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 13.205-2.001 23.345-2.055 32.229-1.324C178.965 79.792 208.193 0 232 0 166.368 0 110.601 45.96 96.215 117.274z"/>'
        )),
        
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M239.899 99 228 92s-20.648 26.536-76 40c-27.75 6.75-32 28-32 28h-.001C106.745 160.001 96 170.746 96 184c0 13.255 10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625V159c22-16.333 77-14.333 87.899-60z"/><path style="fill:#734a3e" d="M256.072 0c-16.242 0-23.667 7.577-24.036 7.963C231.667 7.577 224.243 0 208 0 163.75 0 65.5 61 104 152l16 8c28.733-28.733 110.532-24.057 112.036-62.914 1.504 38.857 83.302 34.181 112.036 62.914l16-8c38.5-91-59.75-152-104-152z"/><path style="fill:#623f33" d="M208 0C163.75 0 65.5 61 104 152v8h16c6.312-6.312 15.188-11.01 25.21-14.913C150.5 50.5 201.691.667 232 8l.023-.046C231.777 7.691 224.385 0 208 0z"/>'
        )),
        
         string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         '" d="M239.943 97.356 230 84c-23.667 54-86.783 63.591-110 64.795V160c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-44.711c22.658-7.909 85.818-33.699 87.943-76.031z"/><path style="fill:#6e4439" d="M272 0c-26 0-40 8-40 8s-14-8-40-8-124.667 50.055-88 166.055c0 0 128-22.722 128-78.055 0 55.333 128 78.055 128 78.055C396.667 50.055 298 0 272 0z"/><path style="fill:#653c34" d="M232 8.004V8s-14-8-40-8-124.666 50.055-88 166.055c0 0 15.495-2.757 35.69-8.67C117.089 53.368 207.192 8.084 232 8.004z"/>'
        )),
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M301.472 127H120v89a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-57.617c72 0 125.396-1.218 149.472-33.481z"/><path style="fill:#ffc85c" d="M325.257 270.564C349.18 263.62 374.77 254.584 384 248c-3.521-48.608-8.837-94.149-16.215-130.726C353.4 45.96 297.633 0 232 0S110.6 45.96 96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 49.5-7.5 56.5 12 112 0l8-16 8 8h32l16-24s2.942 76.874 5.257 158.564z"/><path style="fill:#f6b45e" d="M96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 13.205-2.001 23.345-2.055 32.229-1.324C178.965 79.792 208.193 0 232 0 166.368 0 110.601 45.96 96.215 117.274z"/>'
        )),
        
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M239.899 99 228 92s-20.648 26.536-76 40c-27.75 6.75-32 28-32 28h-.001C106.745 160.001 96 170.746 96 184c0 13.255 10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625V159c22-16.333 77-14.333 87.899-60z"/><path style="fill:#734a3e" d="M256.072 0c-16.242 0-23.667 7.577-24.036 7.963C231.667 7.577 224.243 0 208 0 163.75 0 65.5 61 104 152l16 8c28.733-28.733 110.532-24.057 112.036-62.914 1.504 38.857 83.302 34.181 112.036 62.914l16-8c38.5-91-59.75-152-104-152z"/><path style="fill:#623f33" d="M208 0C163.75 0 65.5 61 104 152v8h16c6.312-6.312 15.188-11.01 25.21-14.913C150.5 50.5 201.691.667 232 8l.023-.046C231.777 7.691 224.385 0 208 0z"/>'
        )),
        
         string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         '" d="M239.943 97.356 230 84c-23.667 54-86.783 63.591-110 64.795V160c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-44.711c22.658-7.909 85.818-33.699 87.943-76.031z"/><path style="fill:#6e4439" d="M272 0c-26 0-40 8-40 8s-14-8-40-8-124.667 50.055-88 166.055c0 0 128-22.722 128-78.055 0 55.333 128 78.055 128 78.055C396.667 50.055 298 0 272 0z"/><path style="fill:#653c34" d="M232 8.004V8s-14-8-40-8-124.666 50.055-88 166.055c0 0 15.495-2.757 35.69-8.67C117.089 53.368 207.192 8.084 232 8.004z"/>'
        )),
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M301.472 127H120v89a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-57.617c72 0 125.396-1.218 149.472-33.481z"/><path style="fill:#ffc85c" d="M325.257 270.564C349.18 263.62 374.77 254.584 384 248c-3.521-48.608-8.837-94.149-16.215-130.726C353.4 45.96 297.633 0 232 0S110.6 45.96 96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 49.5-7.5 56.5 12 112 0l8-16 8 8h32l16-24s2.942 76.874 5.257 158.564z"/><path style="fill:#f6b45e" d="M96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 13.205-2.001 23.345-2.055 32.229-1.324C178.965 79.792 208.193 0 232 0 166.368 0 110.601 45.96 96.215 117.274z"/>'
        )),
        
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M239.899 99 228 92s-20.648 26.536-76 40c-27.75 6.75-32 28-32 28h-.001C106.745 160.001 96 170.746 96 184c0 13.255 10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625V159c22-16.333 77-14.333 87.899-60z"/><path style="fill:#734a3e" d="M256.072 0c-16.242 0-23.667 7.577-24.036 7.963C231.667 7.577 224.243 0 208 0 163.75 0 65.5 61 104 152l16 8c28.733-28.733 110.532-24.057 112.036-62.914 1.504 38.857 83.302 34.181 112.036 62.914l16-8c38.5-91-59.75-152-104-152z"/><path style="fill:#623f33" d="M208 0C163.75 0 65.5 61 104 152v8h16c6.312-6.312 15.188-11.01 25.21-14.913C150.5 50.5 201.691.667 232 8l.023-.046C231.777 7.691 224.385 0 208 0z"/>'
        )),
        
         string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         '" d="M239.943 97.356 230 84c-23.667 54-86.783 63.591-110 64.795V160c-13.255 0-24 10.745-24 24s10.745 24 24 24v8a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-44.711c22.658-7.909 85.818-33.699 87.943-76.031z"/><path style="fill:#6e4439" d="M272 0c-26 0-40 8-40 8s-14-8-40-8-124.667 50.055-88 166.055c0 0 128-22.722 128-78.055 0 55.333 128 78.055 128 78.055C396.667 50.055 298 0 272 0z"/><path style="fill:#653c34" d="M232 8.004V8s-14-8-40-8-124.666 50.055-88 166.055c0 0 15.495-2.757 35.69-8.67C117.089 53.368 207.192 8.084 232 8.004z"/>'
        )),
        
        string(abi.encodePacked('<path style="fill:',
         face_shadow[rand.body],
         'd="M301.472 127H120v89a48 48 0 0 0 29.538 44.308l51.69 21.538a80.115 80.115 0 0 0 7.727 2.749c-22.844-16.711-38.05-31.32-46.96-40.872-6.482-6.95-9.995-16.121-9.995-25.625v-57.617c72 0 125.396-1.218 149.472-33.481z"/><path style="fill:#ffc85c" d="M325.257 270.564C349.18 263.62 374.77 254.584 384 248c-3.521-48.608-8.837-94.149-16.215-130.726C353.4 45.96 297.633 0 232 0S110.6 45.96 96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 49.5-7.5 56.5 12 112 0l8-16 8 8h32l16-24s2.942 76.874 5.257 158.564z"/><path style="fill:#f6b45e" d="M96.215 117.274C88.837 153.851 83.521 199.392 80 248c9.288 6.626 35.077 15.778 59.196 22.688 1.785-53.46 3.837-103.144 4.804-126.688 13.205-2.001 23.345-2.055 32.229-1.324C178.965 79.792 208.193 0 232 0 166.368 0 110.601 45.96 96.215 117.274z"/>'
        ))
        ];
        
    
            string memory svg = string(
                abi.encodePacked(
                    '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 464 464" style="enable-background:new 0 0 464 464;" xml:space="preserve" >  <defs>  <radialGradient id="rgrad" cx="50%" cy="50%" r="50%">    <stop offset="0%" style="stop-color:rgb(255,255,255);stop-opacity:0.98"/>    <stop offset="50%" style="stop-color:rgb(247,254,255);stop-opacity:1.00"/>    <stop offset="90%" style="stop-color:rgb(238,130,258);stop-opacity:1.00"/>  </radialGradient></defs><rect x="0" y="0" width="100%" height="100%" fill="url(#rgrad)" transform="scale(1 4) translate(0, -25)"/><g>',
                    generate_back_hair[rand.hair], 
                    generate_body,
                    generate_front_hair[rand.hair]));
                    
    
    
    
     return (quilt, svg);
        }

        
 function getQuiltForSeedPart2(string memory seed)
                external
                pure
                returns (QuiltStruct2 memory, string memory)
            {
                QuiltStruct2 memory quilt;
                RandValues2 memory rand;
        
                // Determine how big the quilt is
                rand.dress = random(seed, "dress") % 17;
                rand.lips = random(seed, "lips") % 6;
                rand.lipsColor = random(seed, "lipsColor") % 3;
                rand.glasses = random(seed, "glasses") % 2;
                rand.necklace = random(seed, "necklace") % 2;
                rand.eyesColor = random(seed, "eyesColor") % 4;
                
                quilt.dress = rand.dress;
                quilt.lips = rand.lips;
                quilt.lipsColor= rand.lipsColor;
                quilt.glasses = rand.glasses;
                quilt.necklace=rand.necklace;
                quilt.eyesColor = rand.eyesColor;
        
        
        string[3] memory lips_colors = ['#7c5a49','#aa4141','#9c316c'];
        
        string[4] memory eyes_colors = ["#623f33","#353434","#1a5e3b","#2f3b8e"];
        
        string[3] memory face_shadow = ['#956E55','#fdc88e','#ffd7a3'];
        
        
        
        string[5] memory generate_lips = [
            string(abi.encodePacked('<path style="fill:',
            lips_colors[rand.lipsColor],
            ';" d="M232,248.219c-14.223,0-27.527-3.5-36.5-9.605c-3.652-2.484-4.602-7.461-2.113-11.113 c2.48-3.648,7.461-4.598,11.113-2.113c6.289,4.277,16.57,6.832,27.5,6.832s21.211-2.555,27.5-6.832 c3.66-2.492,8.629-1.539,11.113,2.113c2.488,3.652,1.539,8.629-2.113,11.113C259.528,244.719,246.223,248.219,232,248.219z"/>')),
            
              string(abi.encodePacked('<path style="fill:',
            lips_colors[rand.lipsColor],
            ';" d="M267.753 223.115h-71.695c-3.952 0-6.775 2.755-5.928 5.509 4.234 14.41 21.17 25.217 41.775 25.217 20.606 0 37.541-10.807 41.776-25.217.847-2.754-1.976-5.509-5.928-5.509Z"/>')),
            
             string(abi.encodePacked('<path style="fill:',
            lips_colors[rand.lipsColor],
            ';" d="M232,248.219c-14.223,0-27.527-3.5-36.5-9.605c-3.652-2.484-4.602-7.461-2.113-11.113 c2.48-3.648,7.461-4.598,11.113-2.113c6.289,4.277,16.57,6.832,27.5,6.832s21.211-2.555,27.5-6.832 c3.66-2.492,8.629-1.539,11.113,2.113c2.488,3.652,1.539,8.629-2.113,11.113C259.528,244.719,246.223,248.219,232,248.219z"/>')),
            
              string(abi.encodePacked('<path style="fill:',
            lips_colors[rand.lipsColor],
            ';" d="M267.753 223.115h-71.695c-3.952 0-6.775 2.755-5.928 5.509 4.234 14.41 21.17 25.217 41.775 25.217 20.606 0 37.541-10.807 41.776-25.217.847-2.754-1.976-5.509-5.928-5.509Z"/>')),
            
            
             string(abi.encodePacked('<path style="fill:',
            lips_colors[rand.lipsColor],
            ';" d="M232,248.219c-14.223,0-27.527-3.5-36.5-9.605c-3.652-2.484-4.602-7.461-2.113-11.113 c2.48-3.648,7.461-4.598,11.113-2.113c6.289,4.277,16.57,6.832,27.5,6.832s21.211-2.555,27.5-6.832 c3.66-2.492,8.629-1.539,11.113,2.113c2.488,3.652,1.539,8.629-2.113,11.113C259.528,244.719,246.223,248.219,232,248.219z"/>'))
            
            ];
        
        string[17] memory generate_dress = [
           '<path style="fill:#bd445a" d="m137.155 379.991-17.606-44.603a5.713 5.713 0 0 1 3.217-7.412l19.14-7.555a5.713 5.713 0 0 1 7.412 3.217l17.605 44.603-29.768 11.75zm189.691 0 17.605-44.603a5.713 5.713 0 0 0-3.217-7.412l-19.14-7.555a5.713 5.713 0 0 0-7.412 3.217l-17.605 44.603 29.769 11.75z"/><path style="fill:#f05467" d="M312 368H152c-8.837 0-16 7.163-16 16v80h192v-80c0-8.836-7.163-16-16-16z"/><path style="fill:#ffc84a" d="m280 384-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/><path style="fill:#ffa34e" d="m280 416-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/>',
           '<path style="fill:#ff6473" d="m380.377 436.828-9.576-71.817a39.998 39.998 0 0 0-21.76-30.49l-38.201-19.1c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.427-4.425-11.12-5.618-16.719-2.818l-38.201 19.1a40 40 0 0 0-21.76 30.49l-9.576 71.817c-1.918 14.388 9.275 27.172 23.79 27.172h249.175c14.515.002 25.708-12.783 23.789-27.171z"/><path style="fill:#f05467" d="M98.143 350.49c-2.525 4.423-4.251 9.328-4.944 14.521l-9.576 71.817C81.705 451.216 92.898 464 107.413 464H144v-32.869a47.997 47.997 0 0 0-8.677-27.526l-37.18-53.115zm267.715 0c2.525 4.423 4.251 9.328 4.944 14.521l9.576 71.817c1.918 14.388-9.275 27.172-23.79 27.172H320v-32.869a47.997 47.997 0 0 1 8.677-27.526l37.181-53.115zM232 360c34.276 0 64.586-16.655 83.532-42.234l-4.692-2.346c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.428-4.425-11.121-5.618-16.719-2.818l-4.692 2.346C167.414 343.346 197.724 360 232 360z"/>',
           '<path style="fill:#00bea4" d="m380.378 436.829-9.526-71.451a40 40 0 0 0-22.277-30.744l-30.861-14.879c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-30.861 14.879a40 40 0 0 0-22.277 30.744l-9.526 71.451C81.706 451.215 92.898 464 107.414 464h249.175c14.514.001 25.707-12.784 23.789-27.171z"/><path style="fill:#00ab9a" d="M237.106 410.864c38.651-18.172 68.226-48.756 86.091-88.465l-5.484-2.644c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-5.483 2.644c17.865 39.709 47.439 70.293 86.09 88.465l5.105 2.402 5.106-2.401zM144 429.725a40.003 40.003 0 0 0-8.426-24.558l-39.339-50.579c-1.497 3.403-2.582 7.011-3.086 10.79l-9.526 71.451c-1.918 14.387 9.274 27.172 23.79 27.172H144v-34.276zM320 429.725a40.003 40.003 0 0 1 8.426-24.558l39.339-50.579c1.497 3.403 2.582 7.011 3.086 10.79l9.526 71.451c1.918 14.387-9.274 27.172-23.79 27.172H320v-34.276z"/>',
          '<path style="fill:#bd445a" d="m137.155 379.991-17.606-44.603a5.713 5.713 0 0 1 3.217-7.412l19.14-7.555a5.713 5.713 0 0 1 7.412 3.217l17.605 44.603-29.768 11.75zm189.691 0 17.605-44.603a5.713 5.713 0 0 0-3.217-7.412l-19.14-7.555a5.713 5.713 0 0 0-7.412 3.217l-17.605 44.603 29.769 11.75z"/><path style="fill:#f05467" d="M312 368H152c-8.837 0-16 7.163-16 16v80h192v-80c0-8.836-7.163-16-16-16z"/><path style="fill:#ffc84a" d="m280 384-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/><path style="fill:#ffa34e" d="m280 416-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/>',
           '<path style="fill:#ff6473" d="m380.377 436.828-9.576-71.817a39.998 39.998 0 0 0-21.76-30.49l-38.201-19.1c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.427-4.425-11.12-5.618-16.719-2.818l-38.201 19.1a40 40 0 0 0-21.76 30.49l-9.576 71.817c-1.918 14.388 9.275 27.172 23.79 27.172h249.175c14.515.002 25.708-12.783 23.789-27.171z"/><path style="fill:#f05467" d="M98.143 350.49c-2.525 4.423-4.251 9.328-4.944 14.521l-9.576 71.817C81.705 451.216 92.898 464 107.413 464H144v-32.869a47.997 47.997 0 0 0-8.677-27.526l-37.18-53.115zm267.715 0c2.525 4.423 4.251 9.328 4.944 14.521l9.576 71.817c1.918 14.388-9.275 27.172-23.79 27.172H320v-32.869a47.997 47.997 0 0 1 8.677-27.526l37.181-53.115zM232 360c34.276 0 64.586-16.655 83.532-42.234l-4.692-2.346c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.428-4.425-11.121-5.618-16.719-2.818l-4.692 2.346C167.414 343.346 197.724 360 232 360z"/>',
           '<path style="fill:#00bea4" d="m380.378 436.829-9.526-71.451a40 40 0 0 0-22.277-30.744l-30.861-14.879c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-30.861 14.879a40 40 0 0 0-22.277 30.744l-9.526 71.451C81.706 451.215 92.898 464 107.414 464h249.175c14.514.001 25.707-12.784 23.789-27.171z"/><path style="fill:#00ab9a" d="M237.106 410.864c38.651-18.172 68.226-48.756 86.091-88.465l-5.484-2.644c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-5.483 2.644c17.865 39.709 47.439 70.293 86.09 88.465l5.105 2.402 5.106-2.401zM144 429.725a40.003 40.003 0 0 0-8.426-24.558l-39.339-50.579c-1.497 3.403-2.582 7.011-3.086 10.79l-9.526 71.451c-1.918 14.387 9.274 27.172 23.79 27.172H144v-34.276zM320 429.725a40.003 40.003 0 0 1 8.426-24.558l39.339-50.579c1.497 3.403 2.582 7.011 3.086 10.79l9.526 71.451c1.918 14.387-9.274 27.172-23.79 27.172H320v-34.276z"/>',
          '<path style="fill:#bd445a" d="m137.155 379.991-17.606-44.603a5.713 5.713 0 0 1 3.217-7.412l19.14-7.555a5.713 5.713 0 0 1 7.412 3.217l17.605 44.603-29.768 11.75zm189.691 0 17.605-44.603a5.713 5.713 0 0 0-3.217-7.412l-19.14-7.555a5.713 5.713 0 0 0-7.412 3.217l-17.605 44.603 29.769 11.75z"/><path style="fill:#f05467" d="M312 368H152c-8.837 0-16 7.163-16 16v80h192v-80c0-8.836-7.163-16-16-16z"/><path style="fill:#ffc84a" d="m280 384-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/><path style="fill:#ffa34e" d="m280 416-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/>',
           '<path style="fill:#ff6473" d="m380.377 436.828-9.576-71.817a39.998 39.998 0 0 0-21.76-30.49l-38.201-19.1c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.427-4.425-11.12-5.618-16.719-2.818l-38.201 19.1a40 40 0 0 0-21.76 30.49l-9.576 71.817c-1.918 14.388 9.275 27.172 23.79 27.172h249.175c14.515.002 25.708-12.783 23.789-27.171z"/><path style="fill:#f05467" d="M98.143 350.49c-2.525 4.423-4.251 9.328-4.944 14.521l-9.576 71.817C81.705 451.216 92.898 464 107.413 464H144v-32.869a47.997 47.997 0 0 0-8.677-27.526l-37.18-53.115zm267.715 0c2.525 4.423 4.251 9.328 4.944 14.521l9.576 71.817c1.918 14.388-9.275 27.172-23.79 27.172H320v-32.869a47.997 47.997 0 0 1 8.677-27.526l37.181-53.115zM232 360c34.276 0 64.586-16.655 83.532-42.234l-4.692-2.346c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.428-4.425-11.121-5.618-16.719-2.818l-4.692 2.346C167.414 343.346 197.724 360 232 360z"/>',
           '<path style="fill:#00bea4" d="m380.378 436.829-9.526-71.451a40 40 0 0 0-22.277-30.744l-30.861-14.879c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-30.861 14.879a40 40 0 0 0-22.277 30.744l-9.526 71.451C81.706 451.215 92.898 464 107.414 464h249.175c14.514.001 25.707-12.784 23.789-27.171z"/><path style="fill:#00ab9a" d="M237.106 410.864c38.651-18.172 68.226-48.756 86.091-88.465l-5.484-2.644c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-5.483 2.644c17.865 39.709 47.439 70.293 86.09 88.465l5.105 2.402 5.106-2.401zM144 429.725a40.003 40.003 0 0 0-8.426-24.558l-39.339-50.579c-1.497 3.403-2.582 7.011-3.086 10.79l-9.526 71.451c-1.918 14.387 9.274 27.172 23.79 27.172H144v-34.276zM320 429.725a40.003 40.003 0 0 1 8.426-24.558l39.339-50.579c1.497 3.403 2.582 7.011 3.086 10.79l9.526 71.451c1.918 14.387-9.274 27.172-23.79 27.172H320v-34.276z"/>',
             '<path style="fill:#bd445a" d="m137.155 379.991-17.606-44.603a5.713 5.713 0 0 1 3.217-7.412l19.14-7.555a5.713 5.713 0 0 1 7.412 3.217l17.605 44.603-29.768 11.75zm189.691 0 17.605-44.603a5.713 5.713 0 0 0-3.217-7.412l-19.14-7.555a5.713 5.713 0 0 0-7.412 3.217l-17.605 44.603 29.769 11.75z"/><path style="fill:#f05467" d="M312 368H152c-8.837 0-16 7.163-16 16v80h192v-80c0-8.836-7.163-16-16-16z"/><path style="fill:#ffc84a" d="m280 384-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/><path style="fill:#ffa34e" d="m280 416-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/>',
           '<path style="fill:#ff6473" d="m380.377 436.828-9.576-71.817a39.998 39.998 0 0 0-21.76-30.49l-38.201-19.1c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.427-4.425-11.12-5.618-16.719-2.818l-38.201 19.1a40 40 0 0 0-21.76 30.49l-9.576 71.817c-1.918 14.388 9.275 27.172 23.79 27.172h249.175c14.515.002 25.708-12.783 23.789-27.171z"/><path style="fill:#f05467" d="M98.143 350.49c-2.525 4.423-4.251 9.328-4.944 14.521l-9.576 71.817C81.705 451.216 92.898 464 107.413 464H144v-32.869a47.997 47.997 0 0 0-8.677-27.526l-37.18-53.115zm267.715 0c2.525 4.423 4.251 9.328 4.944 14.521l9.576 71.817c1.918 14.388-9.275 27.172-23.79 27.172H320v-32.869a47.997 47.997 0 0 1 8.677-27.526l37.181-53.115zM232 360c34.276 0 64.586-16.655 83.532-42.234l-4.692-2.346c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.428-4.425-11.121-5.618-16.719-2.818l-4.692 2.346C167.414 343.346 197.724 360 232 360z"/>',
           '<path style="fill:#00bea4" d="m380.378 436.829-9.526-71.451a40 40 0 0 0-22.277-30.744l-30.861-14.879c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-30.861 14.879a40 40 0 0 0-22.277 30.744l-9.526 71.451C81.706 451.215 92.898 464 107.414 464h249.175c14.514.001 25.707-12.784 23.789-27.171z"/><path style="fill:#00ab9a" d="M237.106 410.864c38.651-18.172 68.226-48.756 86.091-88.465l-5.484-2.644c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-5.483 2.644c17.865 39.709 47.439 70.293 86.09 88.465l5.105 2.402 5.106-2.401zM144 429.725a40.003 40.003 0 0 0-8.426-24.558l-39.339-50.579c-1.497 3.403-2.582 7.011-3.086 10.79l-9.526 71.451c-1.918 14.387 9.274 27.172 23.79 27.172H144v-34.276zM320 429.725a40.003 40.003 0 0 1 8.426-24.558l39.339-50.579c1.497 3.403 2.582 7.011 3.086 10.79l9.526 71.451c1.918 14.387-9.274 27.172-23.79 27.172H320v-34.276z"/>',
             '<path style="fill:#bd445a" d="m137.155 379.991-17.606-44.603a5.713 5.713 0 0 1 3.217-7.412l19.14-7.555a5.713 5.713 0 0 1 7.412 3.217l17.605 44.603-29.768 11.75zm189.691 0 17.605-44.603a5.713 5.713 0 0 0-3.217-7.412l-19.14-7.555a5.713 5.713 0 0 0-7.412 3.217l-17.605 44.603 29.769 11.75z"/><path style="fill:#f05467" d="M312 368H152c-8.837 0-16 7.163-16 16v80h192v-80c0-8.836-7.163-16-16-16z"/><path style="fill:#ffc84a" d="m280 384-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/><path style="fill:#ffa34e" d="m280 416-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/>',
           '<path style="fill:#ff6473" d="m380.377 436.828-9.576-71.817a39.998 39.998 0 0 0-21.76-30.49l-38.201-19.1c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.427-4.425-11.12-5.618-16.719-2.818l-38.201 19.1a40 40 0 0 0-21.76 30.49l-9.576 71.817c-1.918 14.388 9.275 27.172 23.79 27.172h249.175c14.515.002 25.708-12.783 23.789-27.171z"/><path style="fill:#f05467" d="M98.143 350.49c-2.525 4.423-4.251 9.328-4.944 14.521l-9.576 71.817C81.705 451.216 92.898 464 107.413 464H144v-32.869a47.997 47.997 0 0 0-8.677-27.526l-37.18-53.115zm267.715 0c2.525 4.423 4.251 9.328 4.944 14.521l9.576 71.817c1.918 14.388-9.275 27.172-23.79 27.172H320v-32.869a47.997 47.997 0 0 1 8.677-27.526l37.181-53.115zM232 360c34.276 0 64.586-16.655 83.532-42.234l-4.692-2.346c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.428-4.425-11.121-5.618-16.719-2.818l-4.692 2.346C167.414 343.346 197.724 360 232 360z"/>',
           '<path style="fill:#00bea4" d="m380.378 436.829-9.526-71.451a40 40 0 0 0-22.277-30.744l-30.861-14.879c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-30.861 14.879a40 40 0 0 0-22.277 30.744l-9.526 71.451C81.706 451.215 92.898 464 107.414 464h249.175c14.514.001 25.707-12.784 23.789-27.171z"/><path style="fill:#00ab9a" d="M237.106 410.864c38.651-18.172 68.226-48.756 86.091-88.465l-5.484-2.644c-3.107-1.498-6.75-.046-8.143 3.109C289.335 368.69 254.667 390 232 400.003c-22.667-10.002-57.335-31.313-77.569-77.14-1.393-3.155-5.036-4.606-8.143-3.109l-5.483 2.644c17.865 39.709 47.439 70.293 86.09 88.465l5.105 2.402 5.106-2.401zM144 429.725a40.003 40.003 0 0 0-8.426-24.558l-39.339-50.579c-1.497 3.403-2.582 7.011-3.086 10.79l-9.526 71.451c-1.918 14.387 9.274 27.172 23.79 27.172H144v-34.276zM320 429.725a40.003 40.003 0 0 1 8.426-24.558l39.339-50.579c1.497 3.403 2.582 7.011 3.086 10.79l9.526 71.451c1.918 14.387-9.274 27.172-23.79 27.172H320v-34.276z"/>',
             '<path style="fill:#bd445a" d="m137.155 379.991-17.606-44.603a5.713 5.713 0 0 1 3.217-7.412l19.14-7.555a5.713 5.713 0 0 1 7.412 3.217l17.605 44.603-29.768 11.75zm189.691 0 17.605-44.603a5.713 5.713 0 0 0-3.217-7.412l-19.14-7.555a5.713 5.713 0 0 0-7.412 3.217l-17.605 44.603 29.769 11.75z"/><path style="fill:#f05467" d="M312 368H152c-8.837 0-16 7.163-16 16v80h192v-80c0-8.836-7.163-16-16-16z"/><path style="fill:#ffc84a" d="m280 384-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/><path style="fill:#ffa34e" d="m280 416-48 24-48-24-48 24v16l48-24 48 24 48-24 48 24v-16z"/>',
           '<path style="fill:#ff6473" d="m380.377 436.828-9.576-71.817a39.998 39.998 0 0 0-21.76-30.49l-38.201-19.1c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.427-4.425-11.12-5.618-16.719-2.818l-38.201 19.1a40 40 0 0 0-21.76 30.49l-9.576 71.817c-1.918 14.388 9.275 27.172 23.79 27.172h249.175c14.515.002 25.708-12.783 23.789-27.171z"/><path style="fill:#f05467" d="M98.143 350.49c-2.525 4.423-4.251 9.328-4.944 14.521l-9.576 71.817C81.705 451.216 92.898 464 107.413 464H144v-32.869a47.997 47.997 0 0 0-8.677-27.526l-37.18-53.115zm267.715 0c2.525 4.423 4.251 9.328 4.944 14.521l9.576 71.817c1.918 14.388-9.275 27.172-23.79 27.172H320v-32.869a47.997 47.997 0 0 1 8.677-27.526l37.181-53.115zM232 360c34.276 0 64.586-16.655 83.532-42.234l-4.692-2.346c-5.599-2.799-12.292-1.607-16.719 2.818C278.211 334.141 256.273 344 232 344s-46.211-9.86-62.121-25.762c-4.428-4.425-11.121-5.618-16.719-2.818l-4.692 2.346C167.414 343.346 197.724 360 232 360z"/>'];
        
        
        string memory generate_eyes = string(abi.encodePacked('<g><path style="fill:',
        eyes_colors[rand.eyesColor],
              ';" d="M176,192L176,192c-4.4,0-8-3.6-8-8v-8c0-4.4,3.6-8,8-8l0,0c4.4,0,8,3.6,8,8v8 C184,188.4,180.4,192,176,192z"/></g> <g>      <path style="fill:',
              eyes_colors[rand.eyesColor],
        ';" d="M288,192L288,192c-4.4,0-8-3.6-8-8v-8c0-4.4,3.6-8,8-8l0,0c4.4,0,8,3.6,8,8v8 C296,188.4,292.4,192,288,192z"/> </g>'));
        
        
        uint256 selected_lips = rand.lips;
        uint256 selected_dress = rand.dress;
        
        
             string memory svg = string(
                  abi.encodePacked(generate_lips[selected_lips],
                        generate_dress[selected_dress],
                        generate_eyes,
                        '</g></svg>'
                    )
                );
            
            return(quilt,svg);    
            }
        

    function random(string memory seed, string memory key)
        internal
        pure
        returns (uint256)
    {
        return uint256(keccak256(abi.encodePacked(key, seed)));
    }
}
// File: @openzeppelin/contracts/utils/Context.sol



pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol



pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/utils/Address.sol



pragma solidity ^0.8.0;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol



pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// File: @openzeppelin/contracts/utils/introspection/IERC165.sol



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/utils/introspection/ERC165.sol



pragma solidity ^0.8.0;


/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// File: @openzeppelin/contracts/token/ERC721/IERC721.sol



pragma solidity ^0.8.0;


/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol



pragma solidity ^0.8.0;


/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}

// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol



pragma solidity ^0.8.0;


/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// File: @openzeppelin/contracts/token/ERC721/ERC721.sol



pragma solidity ^0.8.0;








/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol



pragma solidity ^0.8.0;



/**
 * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
 * enumerability of all the token ids in the contract as well as all token ids owned by each
 * account.
 */
abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    // Mapping from owner to list of owned token IDs
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;

    // Array with all token ids, used for enumeration
    uint256[] private _allTokens;

    // Mapping from token id to position in the allTokens array
    mapping(uint256 => uint256) private _allTokensIndex;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    /**
     * @dev Private function to add a token to this extension's token tracking data structures.
     * @param tokenId uint256 ID of the token to be added to the tokens list
     */
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    /**
     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
     * This has O(1) time complexity, but alters the order of the _ownedTokens array.
     * @param from address representing the previous owner of the given token ID
     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
     */
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    /**
     * @dev Private function to remove a token from this extension's token tracking data structures.
     * This has O(1) time complexity, but alters the order of the _allTokens array.
     * @param tokenId uint256 ID of the token to be removed from the tokens list
     */
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index

        // This also deletes the contents at the last position of the array
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}

// File: Quilts.sol



pragma solidity ^0.8.0;





contract Quilts is ERC721Enumerable, ReentrancyGuard, Ownable {
    uint256 public constant MAX_SUPPLY = 4000;
    uint256 public constant PRICE = 1 ether;
    uint256 public constant MAX_PER_TX = 10;
    uint256 public constant MAX_PER_ADDRESS = 20;
    uint256 public tokensMinted;
    bool public isSaleActive = true;
    bool public hasStitcherMinted = false;

    mapping(address => uint256) private _mintedPerAddress;

    function tokenURI(uint256 tokenId)
        public
        view
        override
        returns (string memory)
    {
        // Get the quilt data and generated SVG
        QuiltGenerator.QuiltStruct1 memory quilt1;
        QuiltGenerator.QuiltStruct2 memory quilt2;

        string memory svg1;
        string memory svg2;

        (quilt1, svg1) = QuiltGenerator.getQuiltForSeedPart1(
            Strings.toString(tokenId * 4444)
        );
        (quilt2, svg2) = QuiltGenerator.getQuiltForSeedPart2(
            Strings.toString(tokenId * 4444)
        );

string memory svgFinal = string(abi.encodePacked(svg1,svg2));

        string memory json = Base64.encode(
            bytes(
                string(
                    abi.encodePacked(
                        '{"name":"Quilt #',
                        Strings.toString(tokenId),
                        '","description":"Generative cozy quilts stitched on-chain and stored on the Ethereum network, forever."',
                        ',"image":"data:image/svg+xml;base64,',
                        Base64.encode(bytes(svgFinal)),
                        '"}'
                    )
                )
            )
        );

        string memory output = string(
            abi.encodePacked("data:application/json;base64,", json)
        );

        return output;
    }

    function _claim(uint256 numTokens) private {
        require(totalSupply() < MAX_SUPPLY, "All quilts minted");
        require(
            totalSupply() + numTokens <= MAX_SUPPLY,
            "Minting exceeds max supply"
        );
        require(numTokens <= MAX_PER_TX, "Mint fewer quilts");
        require(numTokens > 0, "Must mint at least 1 quilt");
        require(
            _mintedPerAddress[_msgSender()] + numTokens <= MAX_PER_ADDRESS,
            "Exceeds wallet limit"
        );

        for (uint256 i = 0; i < numTokens; i++) {
            uint256 tokenId = tokensMinted + 1;
            _safeMint(_msgSender(), tokenId);
            tokensMinted += 1;
            _mintedPerAddress[_msgSender()] += 1;
        }
    }

    function claim(uint256 numTokens) public payable virtual {
        require(isSaleActive, "Sale not active");
        require(PRICE * numTokens == msg.value, "ETH amount is incorrect");
        _claim(numTokens);
    }

    function stitcherClaim() public onlyOwner {
        _claim(10);
    }

    function toggleSale() public onlyOwner {
        isSaleActive = !isSaleActive;
    }

    function withdrawAll() public payable nonReentrant onlyOwner {
        require(payable(_msgSender()).send(address(this).balance));
    }

    constructor() ERC721("Quilts", "QLTS") {}
}

library Base64 {
    bytes internal constant TABLE =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    function encode(bytes memory data) internal pure returns (string memory) {
        uint256 len = data.length;
        if (len == 0) return "";
        uint256 encodedLen = 4 * ((len + 2) / 3);
        bytes memory result = new bytes(encodedLen + 32);
        bytes memory table = TABLE;
        assembly {
            let tablePtr := add(table, 1)
            let resultPtr := add(result, 32)

            for {
                let i := 0
            } lt(i, len) {

            } {
                i := add(i, 3)
                let input := and(mload(add(data, i)), 0xffffff)

                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
                out := shl(8, out)
                out := add(
                    out,
                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)
                )
                out := shl(8, out)
                out := add(
                    out,
                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)
                )
                out := shl(8, out)
                out := add(
                    out,
                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)
                )
                out := shl(224, out)

                mstore(resultPtr, out)

                resultPtr := add(resultPtr, 4)
            }

            switch mod(len, 3)
            case 1 {
                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
            }
            case 2 {
                mstore(sub(resultPtr, 1), shl(248, 0x3d))
            }

            mstore(result, encodedLen)
        }
        return string(result);
    }
}