/**
 *Submitted for verification at Etherscan.io on 2021-08-28
*/

pragma solidity ^0.4.10;

//-----------------------------------------
// Контракт API владельца
// Содержит поля:
//      * адрес владельца
//      * адрес кандидата во владельцы
// Содержит функции:
//      * Верификация владельца
//      * Смена владельца
//      * Подтверждение смены владельца
//-----------------------------------------
contract owned {
    //Адрес владельца контракта
    address public owner;
    address public candidate;

    constructor() public {
        owner = msg.sender;
    }

    function changeOwner(address _owner) onlyOwner public {
        candidate = _owner;
    }

    function confirmOwner() public {
        require(candidate == msg.sender);
        owner = candidate;
    }

    modifier onlyOwner {
        require(owner == msg.sender);
        _;
    }

}

//-----------------------------------------
// Контракт формирования нашего токена
// Выполяет публикацию токена в сети
// Осуществляет продажу токенов
//-----------------------------------------
contract InvestChain_contract_user is owned {

    //Выпущенное количество токенов
    uint256 public totalSupply;
    //Маппинг палансов всех держателей токена данного смарт контракта
    mapping (address => uint256) public  balanceOf;

    //Событие перевода токенов из одного адреса к другому
    event Transfer(address indexed from, address indexed to, uint tokens);

    //----------------
    // Конструктор контракта
    //----------------
    constructor() public {
        //Общее количество выпускаемых токенов по данному контракту (эмиссия)
        totalSupply = 1000000;
        //Количество токенов, которые мы записываем на баланс смарт контракта
        //Эти токены мы вывводим на продажу
        balanceOf[this] = 900000;
        //Эти токены мы записываем на баланс владельца контракта
        //это "пакет акций" владельца
        balanceOf[owner] = totalSupply - balanceOf[this];
        //Вызываем событие transfer
        //Т.е. при публикации контракта на счет владельца сразу же поступит его доля токенов
        //Это событие сразуже зафиксируется в блокчейне (создаст первый узкел в сети?)
        emit Transfer(this, owner, balanceOf[owner]);
    }

    //----------------
    // Продажа токенов
    //----------------
    function() public {
        //Проверяем наличие свободных токенов для продажи
        require(balanceOf[this] > 0);
        /*
            Высчитываем количество токенов, которое необходимо перевести покупателю
            ---
            Вычисляется на основании количества валюты, которое нам выслал покупатель
            ---
            В данном примере мы вычисляем количество токенов на основании перевода в Ethereum,
            а именно в wei, поэтому получаемое значение делится на 10^-18, для получения значения ETH
            Ставка нашего токена следующая: 5000 TKN = 1 ETH;
        */
        uint256 tokens = 5000 * msg.value / 1000000000000000000;

        //Проверяем имеется ли необходимое количество токенов для перевода на балансе
        if(tokens > balanceOf[this]) {
            //Если нет, то получаем остаток на балансе
            tokens = balanceOf[this];
            //Конвертируем в Wei по заданному курсу
            uint valueWei = tokens  * 1000000000000000000 / 5000;
            //Рассчитываем и переводим сдачу покупателю, исходя из рассчитанного остатка по балансу
            msg.sender.transfer(msg.value - valueWei);
        }
        //Проверяем, что у нас расчиталось колличество токенов для перевода покупателю
        require(tokens > 0);
        //Кладем токены на баланс покупателя
        balanceOf[msg.sender] += tokens;
        //Снимаем токены с баланса контракта
        balanceOf[this] -= tokens;
        //Вызываем событие перевода токенов
        //Фиксация операции в блокчейн
        emit Transfer(this, msg.sender, tokens);
    }
}

//-----------------------------------------
// Контракт API токена для пользователей
//-----------------------------------------
contract Token is InvestChain_contract_user {
    //Версия выпущенного токена
    string public standart      = 'InvestToken 0.1';
    //Наименование токена
    string public name          = 'InvestTokenUserName';
    //Символьное значение валюты токена
    string public symbol        = 'ITUserName';
    /*
        Дробная часть токена
        (минимальная часть токена, с которым мы будем взаимодействовать)
    */
    uint8  public decimals      = 0;

    //--------------
    //Конструктор токена
    //--------------
    constructor() public InvestChain_contract_user() {}

    //--------------
    //Перевод токена
    // @param _to - адрес получателя токена
    // @param _value - количество перечиляемых токенов
    //--------------
    function transfer(address _to, uint256 _value) public {
        //Проверяем наличие доступых средств для перевода
        require(balanceOf[msg.sender] >= _value);
        //Снимаем токены с баланса текущего счета владельца
        balanceOf[msg.sender] -= _value;
        //Начисляем токены на баланс получателя
        balanceOf[_to] += _value;
        //Вызываем событие перевода токенов
        //Фиксация операции в блокчейн
        emit Transfer(msg.sender, _to, _value);
    }
}

//-----------------------------------------
// Мастер контракт токена
// Содержит функции для контракта, доступные только владельцу-создателю токена
//-----------------------------------------
contract MasterContract is Token {
    //--------------
    //Конструктор Мастера токена
    //--------------
    constructor() public onlyOwner {}

    //--------------
    //Перевод остатка баланса контракта (всех переведенных средств покупателе) на счет владельца
    //--------------
    function withdraw() public onlyOwner {
        owner.transfer(this.balance);
    }
}